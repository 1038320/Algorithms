BUBBLESORT ALGORITHM:

public class BubbleSort{ 
   
   public static void main(String arg []){
   int [] Array ={9,8,4,6,6,4,3,2,1};
   int [] array = bubbleSort(Array);
       for(int i=0;i<array.length;i++){
         System.out.print(array[i]);
}
   }
public static int[] bubbleSort(int[]array){
         
      int i,j,swap=0;
  
         for(i=0;i<array.length-1;i++)
             for(j=0;j<array.length-i-1;j++)
                 if(array[j]>array[j+1]){
                     swap= array[j];
                     array[j]=array[j+1];
                     array[j+1]=swap;
                 }
         return array;
   }


}
-------------------------------------------------------------------------------------------------------------------------------------------
BINARY SEARCH:
public class BinarySearch{ 
   
   public static void main(String arg []){
   int [] Array ={9,8,4,6,4,3,2,1};
   int key=6;
   int m =BinarySearch(key,Array,0,Array.length-1);
   
         System.out.print("key "+key+"s position: "+m);
}
public static int findMidPoint(int min,int max){
    int midpoint;
    midpoint = (min+max)/2;
    return midpoint;
    
    
}   
public static int BinarySearch(int key,int[]array,int min,int max){
     int midpoint = 0,value = 0;     
     if(max<min)
        value = -1;
     else
         midpoint = findMidPoint(min,max);
      
     if(array[midpoint]<key)
         BinarySearch(key,array,midpoint+1,max);
     else if (array[midpoint]>key)
         BinarySearch(key,array,min,midpoint);
     else
         value = midpoint;
         
     
     return midpoint+1;
                 
     
     
                
   }


}
---------------------------------------------------------------------------------------------------------------------------------------
HEAPSORT ALGORITHM:
public class HeapSort 
{
    private static int[] a;
    private static int n;
    private static int left;
    private static int right;
    private static int largest;
    
    public static void main(String[] args) {
        int []a1={4,1,3,2,16,9,10,14,8,7};
        sort(a1);
        for(int i=0;i<a1.length;i++){
            System.out.print(a1[i] + " ");
        }
    }

    
    public static void buildheap(int []a){
        n=a.length-1;
        for(int i=n/2;i>=0;i--){
            maxheap(a,i);
        }
    }
    
    public static void maxheap(int[] a, int i){ 
        left=2*i;
        right=2*i+1;
        if(left <= n && a[left] > a[i]){
            largest=left;
        }
        else{
            largest=i;
        }
        
        if(right <= n && a[right] > a[largest]){
            largest=right;
        }
        if(largest!=i){
            exchange(i,largest);
            maxheap(a, largest);
        }
    }
    
    public static void exchange(int i, int j){
        int t=a[i];
        a[i]=a[j];
        a[j]=t; 
        }
    
    public static void sort(int []a0){
        a=a0;
        buildheap(a);
        
        for(int i=n;i>0;i--){
            exchange(0, i);
            n=n-1;
            maxheap(a, 0);
        }
    }
    
    
}
------------------------------------------------------------------------------------------------------------------------------------------
MERGESORT ALGORITHM:

public class MergeSort {
     
    private int[] array;
    private int[] tempArray;
    private int length;
 
    public static void main(String a[]){
         
        int[] inputArr = {45,23,11,89,77,98,4,28,65,43};
        MergeSort mms = new MergeSort();
        mms.sort(inputArr);
        for(int i:inputArr){
            System.out.print(i);
            System.out.print(" ");
        }
    }
     
    public void sort(int inputArr[]) {
        this.array = inputArr;
        this.length = inputArr.length;
        this.tempArray = new int[length];
        doMergeSort(0, length - 1);
    }
 
    private void doMergeSort(int lowerIndex, int higherIndex) {
         
        if (lowerIndex < higherIndex) {
            int middle = lowerIndex + (higherIndex - lowerIndex) / 2;
            // Below step sorts the left side of the array
            doMergeSort(lowerIndex, middle);
            // Below step sorts the right side of the array
            doMergeSort(middle + 1, higherIndex);
            // Now merge both sides
            mergeParts(lowerIndex, middle, higherIndex);
        }
    }
 
    private void mergeParts(int lowerIndex, int middle, int higherIndex) {
 
        for (int i = lowerIndex; i <= higherIndex; i++) {
            tempArray[i] = array[i];
        }
        int i = lowerIndex;
        int j = middle + 1;
        int k = lowerIndex;
        while (i <= middle && j <= higherIndex) {
            if (tempArray[i] <= tempArray[j]) {
                array[k] = tempArray[i];
                i++;
            } else {
                array[k] = tempArray[j];
                j++;
            }
            k++;
        }
        while (i <= middle) {
            array[k] = tempArray[i];
            k++;
            i++;
        }
 
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------
LINEAR SEARCH:

public class LinearSearch{
    
    public static void main(String arg[]){
        
        int [] array = {4,5,6,1,2,3,9,8,7};
        int key=6;
        int v =linearSearch(key,array)+1;
        System.out.print("key "+key+"s position: "+v);
        
    }
    
    public static int linearSearch(int key,int []array){
        
        for(int i=0;i<array.length;i++){
            if(array[i]==key){
                return i;
            }
        }
        
        return -1;
        
        
        
    }
    
}
---------------------------------------------------------------------------------------------------------------------------------------------------------
QUICKSORT ALGORITHM:

public class QuickSort {
     
    private int array[];
    private int length;
    public static void main(String a[]){
         
        QuickSort sorter = new QuickSort();
        int[] input = {24,2,45,20,56,75,2,56,99,53,12};
        sorter.sort(input);
        for(int i:input){
            System.out.print(i);
            System.out.print(" ");
       
       }

        }
    
 
    public void sort(int[] inputArr) {
         
        if (inputArr == null || inputArr.length == 0) {
            return;
        }
        this.array = inputArr;
        length = inputArr.length;
        quickSort(0, length - 1);
    }
 
    private void quickSort(int lowerIndex, int higherIndex) {
         
        int i = lowerIndex;
        int j = higherIndex;
        
        int pivot = array[lowerIndex+(higherIndex-lowerIndex)/2];
        
        while (i <= j) {
            
            while (array[i] < pivot) {
                i++;
            }
            while (array[j] > pivot) {
                j--;
            }
            if (i <= j) {
                exchangeNumbers(i, j);
               
                i++;
                j--;
            }
        }
     
        if (lowerIndex < j)
            quickSort(lowerIndex, j);
        if (i < higherIndex)
            quickSort(i, higherIndex);
    }
 
    private void exchangeNumbers(int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
     
    
}
    ---------------------------------------------------------------------------------------------------------------------------------------------------------
    INSERTIONSORT ALGORITHM:
    
     public class InsertionSort {
 private static int i;
 public static void main(String a[]){
         
     
        int []arr1 = {10,20,45,23,14,56,32,25,95};
        int[] arr2 = doInsertionSort(arr1);
        for(int i:arr2){
        System.out.print(i);
        System.out.print(", ");
        }
      }
  public static int[] doInsertionSort(int[] arr){

     int n = arr.length;
        for (int j = 1; j < n; j++) {
            int key = arr[j];
            int i = j-1;
            while ( (i > -1) && ( arr [i] > key ) ) {
                arr [i+1] = arr [i];
                i--;
            }
            arr[i+1] = key;
            

       
       }
        return arr;



   }
 }
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------
 SELECTIONSORT ALGORITHM:
 
  public class SelectionSort {
 private static int i;
 public static void main(String a[]){
         
     
        int []arr1 = {10,20,45,23,14,56,32,25,95};
        int[] arr2 = doSelectionSort(arr1);
        for(int i:arr2){
        System.out.print(i);
        System.out.print(", ");
        }
      }
  public static int[] doSelectionSort(int[] arr){

     for (int i = 0; i < arr.length - 1; i++)
     {
     int index = i;
     for (int j = i + 1; j < arr.length; j++)
     if (arr[j] < arr[index]) 
         index = j;
     int smallerNumber = arr[index];
         arr[index] = arr[i];
         arr[i] = smallerNumber;
       }
       return arr;
       }


}
----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------
















